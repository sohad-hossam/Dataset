Refactor MarshallerFactoryGenerator to defer devmode generation work
Currently, the MarshallerFactoryGenerator attempts to create all marshallers at once when an errai application starts up in dev mode. For large applications, this takes a considerable amount of time (>30 seconds).  In reality, a small subset of marshallers are typically needed.

It is proposed that the generator be redesigned to defer the majority of the work until it is needed, making marshaller generation 'on demand' on a per-class basis.  The goal is that the startup time taken by the marshaller be less than one second.

The proposal is that marshalling occur in a two-phase process.  The first phase is to use the type oracle to scan for portable classes.  For each of these classes, the generator will create a new interface, which extends CreateMarshallerInterface. For example, if there were two classes, Foo and Bar both marked as portable, it would generate the following:

{code:java}

  @MarshallerFor(com.sample.marshaller.sample.Bar.class)
  public interface MarshallerFor_Bar extends CreateMarshallerInterface<Bar> {}
  
  @MarshallerFor(com.sample.marshaller.sample.Foo.class)
  public interface MarshallerFor_Foo extends CreateMarshallerInterface<Foo> {}

{code}

Of note, notice that there is a new annotation, "MarshallerFor" which will let the next generator get class information for the interface, and a new interface "CreateMarshallerInterface", which has at a minimum a get() method which will return the marshaller for the class in question.

The MarshallerFactoryImpl will then have a getMarshaller( Class portableClass ) method, which will if/else through the marshallable classes and call GWT.create() on the appropriate createMarshallerInterface.  In this example,

{code:java}

public Marshaller<Object> getMarshaller( Class portableClass ) {
  
    if(portableClass.getName().equals("com.sample.marshaller.sample.Bar"))
      return GWT.create( MarshallerFor_Bar.class );
    
    else if(portableClass.getName().equals("com.sample.marshaller.sample.Foo"))
      return GWT.create( MarshallerFor_Foo.class );
    
    return null;
    
  }
{code}

Here is a sample .gwt.xml file:

{code:xml}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit 2.5.1//EN" "http://google-web-toolkit.googlecode.com/svn/tags/2.5.1/distro-source/core/src/gwt-module.dtd">
<module rename-to="m">
	<inherits name="com.google.gwt.user.User" />
	
	<entry-point class="com.sample.marshaller.client.MarshallerEntryPoint"/>

    <generate-with class="com.sample.marshaller.rebind.MarshallerFactoryGenerator">
        <when-type-assignable class="com.sample.marshaller.support.MarshallerFactory"/>
    </generate-with>
    
	<generate-with class="com.sample.marshaller.rebind.CreateMarshallerGenerator">
        <when-type-assignable class="com.sample.marshaller.support.CreateMarshallerInterface"/>
    </generate-with>
    
   <source path="client"/>
   <source path="sample"/>
   <source path="support"/>
</module>

{code}

Suggestions:

* Each Marshaller will probably need a reference to the MarshallerFactory, as it will need marshallers to marshall some of its properties
* the MarshallerFactory itself could keep a cache of created createMarshallerInterface's if this would improve performance.

