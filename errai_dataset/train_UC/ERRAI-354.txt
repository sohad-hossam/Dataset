Client bus sometimes spams server bus after client wakes from sleep
Scenario: I started an Errai app in dev mode yesterday afternoon, then put my computer to sleep when I left work (errai app still running). When I woke my computer this morning, the CPU was pegged. Turned out, firefox was blasting the errai server with bus requests as quickly as it could (>500/s). This went on for at least 10 minutes.

My guess is that the client bus is using a scheduling mode that requires a fixed rate over time (so if a scheduled callback is missed, the next one is doubled up to catch up with the desired rate, and so on). We should instead use a scheduling mode where there is a fixed delay between callbacks (so if one is missed/delayed, no catchup is necessary).

Final note: I've recently switched my dev mode work from Chrome to Firefox. It's extremely likely that this issue is not reproducible in Chrome. Not sure if Chrome or Firefox is the odd one out.

The threads in the dev mode VM that appear to be doing the dirty work:

"ExecutorPoolWorker" daemon prio=5 tid=10d48a000 nid=0x12895e000 waiting on condition [12895d000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <7becf69d8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.ArrayBlockingQueue.poll(ArrayBlockingQueue.java:340)
	at org.jboss.errai.bus.server.async.scheduling.PooledExecutorService.getNextTask(PooledExecutorService.java:228)
	at org.jboss.errai.bus.server.async.scheduling.ThreadWorker.run(ThreadWorker.java:65)
	at java.lang.Thread.run(Thread.java:680)

"Thread-16" prio=5 tid=10d1cd800 nid=0x12885b000 waiting on condition [12885a000]
   java.lang.Thread.State: TIMED_WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  <7becf6a08> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:196)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2025)
	at java.util.concurrent.PriorityBlockingQueue.poll(PriorityBlockingQueue.java:245)
	at org.jboss.errai.bus.server.async.scheduling.PooledExecutorService.runAllDue(PooledExecutorService.java:182)
	at org.jboss.errai.bus.server.async.scheduling.PooledExecutorService.access$700(PooledExecutorService.java:33)
	at org.jboss.errai.bus.server.async.scheduling.PooledExecutorService$SchedulerThread.run(PooledExecutorService.java:375)
